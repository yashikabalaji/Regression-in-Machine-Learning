# -*- coding: utf-8 -*-
"""student.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-nWwsvi17cm58I0Oe4OGkcvUb2Ilp9Yf
"""

import argparse
import numpy as np
import pandas as pd

def run_linear_regression(data_file, eta, threshold):
    # Load data from CSV
    data = pd.read_csv(data_file, header=None)

    # Add a column of ones for the bias term
    data.insert(0, 'bias', 1)

    # Extract features and target
    X = data.iloc[:, :-1].values
    y = data.iloc[:, -1].values

    # Initialize weights and bias to zero
    weights = np.zeros(X.shape[1])
    weights[0] = 0

    # Initialize variables
    previous_error = float('inf')
    iteration = 0

    while True:
        # Calculate predictions (Predicted output: y = w0+w1.x1+w2.x2+...+wn.xn)
        predictions = np.dot(X, weights)

        # Calculate errors ( e= targeted output-predicted output)
        errors = y - predictions

        # Calculate gradient
        gradient = np.dot(X.T, errors)

        # Calculate sum of squared errors
        current_error = np.sum(errors**2)

        # Print results for each iteration with rounded values
        output = [iteration] + list(weights) + [current_error]
        print(f"{iteration},{','.join(map(str, weights))},{current_error:.9f}")

        # Update weights
        weights =  weights + (eta * gradient)

        # Check for convergence
        if abs(previous_error - current_error) < threshold:
            break

        # Update variables for the next iteration
        previous_error = current_error
        iteration = iteration + 1

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Linear Regression using Gradient Descent")
    parser.add_argument("--data", type=str, help="Location of the data file (CSV)")
    parser.add_argument("--eta", type=float, help="Learning rate of gradient descent")
    parser.add_argument("--threshold", type=float, help="Threshold for convergence")

    args = parser.parse_args()

    # Run the linear regression with gradient descent
    run_linear_regression(args.data, args.eta, args.threshold)